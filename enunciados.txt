1. ft_memcpy
Assignment name: ft_memcpy
Expected files: ft_memcpy.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that copies n bytes from memory area src to memory area dest.
The memory areas must not overlap (use ft_memmove if they do).

Your function must be declared as follows:

c
void    *ft_memcpy(void *dest, const void *src, size_t n);
Example:

c
char src[] = "Hello";
char dest[6];
ft_memcpy(dest, src, 6); // dest becomes "Hello\0"
2. ft_memmove
Assignment name: ft_memmove
Expected files: ft_memmove.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that copies n bytes from src to dest. The memory areas may overlap.

Your function must be declared as follows:

c
void    *ft_memmove(void *dest, const void *src, size_t n);
Example:

c
char str[] = "ABCDEF";
ft_memmove(str + 2, str, 4); // str becomes "ABABCF"
3. ft_strlcat
Assignment name: ft_strlcat
Expected files: ft_strlcat.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that appends src to dest, ensuring the total length is at most size.
It returns the initial length of dest plus the length of src.

Your function must be declared as follows:

c
size_t  ft_strlcat(char *dest, const char *src, size_t size);
Example:

c
char dest[10] = "Hello";
ft_strlcat(dest, " World", 10); // dest becomes "Hello Wor", returns 11
4. ft_strchr
Assignment name: ft_strchr
Expected files: ft_strchr.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that locates the first occurrence of c (converted to char) in s.
The terminating \0 is considered part of the string.

Your function must be declared as follows:

c
char    *ft_strchr(const char *s, int c);
Example:

c
ft_strchr("Hello", 'e');  // returns pointer to 'e'  
ft_strchr("Hello", '\0'); // returns pointer to the end  
5. ft_strrchr
Assignment name: ft_strrchr
Expected files: ft_strrchr.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that locates the last occurrence of c (converted to char) in s.

Your function must be declared as follows:

c
char    *ft_strrchr(const char *s, int c);
Example:

c
ft_strrchr("Hello", 'l'); // returns pointer to the second 'l'  
6. ft_memchr
Assignment name: ft_memchr
Expected files: ft_memchr.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that scans the initial n bytes of s for c (converted to unsigned char).

Your function must be declared as follows:

c
void    *ft_memchr(const void *s, int c, size_t n);
Example:

c
ft_memchr("Hello", 'e', 5); // returns pointer to 'e'  
7. ft_memcmp
Assignment name: ft_memcmp
Expected files: ft_memcmp.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that compares the first n bytes of s1 and s2.

Your function must be declared as follows:

c
int     ft_memcmp(const void *s1, const void *s2, size_t n);
Example:

c
ft_memcmp("Hello", "Hellx", 5); // returns negative value  
8. ft_calloc
Assignment name: ft_calloc
Expected files: ft_calloc.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that allocates memory for nmemb elements of size bytes each, and initializes it to zero.

Your function must be declared as follows:

c
void    *ft_calloc(size_t nmemb, size_t size);
Example:

c
int *arr = ft_calloc(5, sizeof(int)); // arr = {0, 0, 0, 0, 0}  
free(arr);  
9. ft_strdup
Assignment name: ft_strdup
Expected files: ft_strdup.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that returns a duplicate of s, allocated with malloc.

Your function must be declared as follows:

c
char    *ft_strdup(const char *s);
Example:

c
char *dup = ft_strdup("Hello");  
free(dup);  
10. ft_substr
Assignment name: ft_substr
Expected files: ft_substr.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that returns a substring of s, starting at start with max length len.

Your function must be declared as follows:

c
char    *ft_substr(char const *s, unsigned int start, size_t len);
Example:

c
ft_substr("Hello World", 6, 5); // returns "World"  
11. ft_strjoin
Assignment name: ft_strjoin
Expected files: ft_strjoin.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that concatenates s1 and s2 into a new string (allocated with malloc).

Your function must be declared as follows:

c
char    *ft_strjoin(char const *s1, char const *s2);
Example:

c
ft_strjoin("Hello", " World"); // returns "Hello World"  
12. ft_strtrim
Assignment name: ft_strtrim
Expected files: ft_strtrim.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that trims set characters from the start/end of s1.

Your function must be declared as follows:

c
char    *ft_strtrim(char const *s1, char const *set);
Example:

c
ft_strtrim("  Hello  ", " "); // returns "Hello"  
13. ft_split
Assignment name: ft_split
Expected files: ft_split.c
Allowed functions: malloc, free
--------------------------------------------------------------------------------

Write a function that splits s into an array of strings using c as a delimiter.

Your function must be declared as follows:

c
char    **ft_split(char const *s, char c);
Example:

c
ft_split("Hello World", ' '); // returns {"Hello", "World", NULL}  
14. ft_itoa
Assignment name: ft_itoa
Expected files: ft_itoa.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that converts n into a string (allocated with malloc).

Your function must be declared as follows:

c
char    *ft_itoa(int n);
Example:

c
ft_itoa(-123); // returns "-123"  
15. ft_strmapi
Assignment name: ft_strmapi
Expected files: ft_strmapi.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that applies f to each character of s (with its index) to create a new string.

Your function must be declared as follows:

c
char    *ft_strmapi(char const *s, char (*f)(unsigned int, char));
Example:

c
char to_upper(unsigned int i, char c) { return (c - 32); }  
ft_strmapi("hello", to_upper); // returns "HELLO"  
16. ft_striteri
Assignment name: ft_striteri
Expected files: ft_striteri.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that applies f to each character of s (with its index).

Your function must be declared as follows:

c
void    ft_striteri(char *s, void (*f)(unsigned int, char *));
Example:

c
void to_upper(unsigned int i, char *c) { *c -= 32; }  
ft_striteri("hello", to_upper); // s becomes "HELLO"  
17. ft_putchar_fd
Assignment name: ft_putchar_fd
Expected files: ft_putchar_fd.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that writes c to file descriptor fd.

Your function must be declared as follows:

c
void    ft_putchar_fd(char c, int fd);
Example:

c
ft_putchar_fd('A', 1); // writes 'A' to stdout  
18. ft_putstr_fd
Assignment name: ft_putstr_fd
Expected files: ft_putstr_fd.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that writes s to file descriptor fd.

Your function must be declared as follows:

c
void    ft_putstr_fd(char *s, int fd);
Example:

c
ft_putstr_fd("Hello", 1); // writes "Hello" to stdout  
19. ft_putendl_fd
Assignment name: ft_putendl_fd
Expected files: ft_putendl_fd.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that writes s followed by \n to file descriptor fd.

Your function must be declared as follows:

c
void    ft_putendl_fd(char *s, int fd);
Example:

c
ft_putendl_fd("Hello", 1); // writes "Hello\n" to stdout  
20. ft_putnbr_fd
Assignment name: ft_putnbr_fd
Expected files: ft_putnbr_fd.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that writes n to file descriptor fd.

Your function must be declared as follows:

c
void    ft_putnbr_fd(int n, int fd);
Example:

c
ft_putnbr_fd(-123, 1); // writes "-123" to stdout  
Bônus: Funções de Lista Encadeada
(Exemplo para ft_lstnew)

Assignment name: ft_lstnew
Expected files: ft_lstnew.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that creates a new list node with content.

Your function must be declared as follows:

c
t_list  *ft_lstnew(void *content);
Example:

c
t_list *node = ft_lstnew("Hello");  
// node->content = "Hello", node->next = NULL  
free(node);  
